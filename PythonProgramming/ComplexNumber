  iterator
class eter:
    def __iter__(self):
        self.a=1
        return self
    def __next__(self):
        n=self.a
        self.a+=2
        return n
k=iter(eter())
print(next(k))
print(next(k))
print(next(k))
print(next(k))

========================

list=[1,3,4,5]
it=iter(list)
while True:
    try:
        print(next(it))
    except StopIteration:
        break

==========================

def rev_str(str):
    n=len(str)
    for i in range(n-1,-1,-1):
        yield str[i]
obj=rev_str(input("Enter String"))

while True:
    try:
        print(next(obj),end=" ")
    except StopIteration:
        break


======================================

obj = []
obj=input("Enter String ")
for i in obj[::-1]:
    print(i,end=" ")
=====================================


ob=lambda x:1 if x==0 else x*ob(x-1)
print(ob(5))

===========================================

def fibonacci_numbers(nums):
    x, y = 0, 1
    for _ in range(nums):
        yield x
        x, y = y, x+y
        
obj=fibonacci_numbers(5)
print(next(obj))
print(next(obj))
print(next(obj))
print(next(obj))
print(next(obj))

===================================
class complex:
    def __init__(self,real,imag):
        self.real=real
        self.imag=imag
    def add(self,num):
        real = self.real+num.real
        imag = self.imag+num.imag
        number=complex(real,imag)
        return number
        
    
n1=complex(3,8)
n2=complex(2,6)
result=n1.add(n2)
print(result.real,"+",result.imag,"i")


        
